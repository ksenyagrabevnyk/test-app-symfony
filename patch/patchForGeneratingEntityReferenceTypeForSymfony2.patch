--- vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php	2016-12-19 15:38:55.353419671 +0200
+++ vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php	2016-12-19 15:33:23.000000000 +0200
@@ -11,6 +11,8 @@

 namespace Sensio\Bundle\GeneratorBundle\Command;

+use Doctrine\ORM\Mapping\ClassMetadataInfo;
+use Sensio\Bundle\GeneratorBundle\Command\AutoComplete\EntitiesAutoCompleter;
 use Sensio\Bundle\GeneratorBundle\Generator\DoctrineEntityGenerator;
 use Sensio\Bundle\GeneratorBundle\Command\Helper\QuestionHelper;
 use Symfony\Component\Console\Input\InputOption;
@@ -243,6 +245,17 @@
             return $type;
         };

+        $mappedType = ['ManyToOne', 'OneToMany', 'ManyToMany'];
+
+        $mappedTypeValidator = function ($type) use ($mappedType) {
+            // FIXME: take into account user-defined field types
+            if (!in_array($type, $mappedType)) {
+                throw new \InvalidArgumentException(sprintf('Invalid mapped type "%s". Must be one of this (ManyToOne, OneToMany, ManyToMany)', $type));
+            }
+
+            return $type;
+        };
+
         $lengthValidator = function ($length) {
             if (!$length) {
                 return $length;
@@ -259,6 +272,13 @@
             return $length;
         };

+        $boolValidator = function ($value) {
+            if (null === $valueAsBool = filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)) {
+                throw new \InvalidArgumentException(sprintf('Invalid bool value "%s".', $value));
+            }
+            return $valueAsBool;
+        };
+
         while (true) {
             $output->writeln('');
             $generator = $this->getGenerator();
@@ -305,6 +325,100 @@
                 $question = new Question($questionHelper->getQuestion('Field length', 255), 255);
                 $question->setValidator($lengthValidator);
                 $data['length'] = $questionHelper->ask($input, $output, $question);
+            } elseif ($type == 'entity_reference') {
+                $data['cascade'] = true;
+                $data['isCascadePersist'] = true;
+                $data['isCascadeRemove'] = false;
+                $data['isCascadeDetach'] = false;
+                $data['isCascadeMerge'] = false;
+                $data['isCascadeRefresh'] = false;
+                $data['check_type'] = $type;
+
+                $question = new Question($questionHelper->getQuestion('Mapping type', 'ManyToOne'), 'ManyToOne');
+                $question->setValidator($mappedTypeValidator);
+                $question->setAutocompleterValues(['ManyToOne', 'OneToMany', 'ManyToMany']);
+                $type = $questionHelper->ask($input, $output, $question);
+
+                while (true) {
+                    $question = new Question($questionHelper->getQuestion('The Entity shortcut name', $input->getOption('entity')), $input->getOption('entity'));
+                    $question->setValidator(array('Sensio\Bundle\GeneratorBundle\Command\Validators', 'validateEntityName'));
+
+                    $autocompleter = new EntitiesAutoCompleter($this->getContainer()->get('doctrine')->getManager());
+                    $autocompleteEntities = $autocompleter->getSuggestions();
+                    $question->setAutocompleterValues($autocompleteEntities);
+                    $bundleEntity = $questionHelper->ask($input, $output, $question);
+
+                    list($bundle, $entity) = $this->parseShortcutNotation($bundleEntity);
+
+                    $data['targetEntity'] = $bundle . '\Entity\\' . $entity;
+                    try {
+                        $b = $this->getContainer()->get('kernel')->getBundle($bundle);
+
+                        if (file_exists($b->getPath() . '/Entity/' . str_replace('\\', '/', $entity) . '.php') || $bundleEntity == $input->getOption('entity')) {
+                            break;
+                        }
+
+                        $output->writeln(sprintf('<bg=red>Entity "%s:%s" does not exists</>.', $bundle, $entity));
+                    } catch (\Exception $e) {
+                        $output->writeln(sprintf('<bg=red>Bundle "%s" does not exist.</>', $bundle));
+                    }
+                }
+
+                if ($type == 'ManyToOne') {
+                    $data['type'] = ClassMetadataInfo::MANY_TO_ONE;
+                    $question = new Question($questionHelper->getQuestion('Join Columns referencedColumnName', 'id'), 'id');
+                    $referencedColumnName = $questionHelper->ask($input, $output, $question);
+                    $data['joinColumns'][] = [
+                        'name' => $data['columnName'],
+                        'referencedColumnName' => $referencedColumnName,
+                        'onDelete' => 'CASCADE',
+                    ];
+                } elseif ($type == 'ManyToMany') {
+                    $data['type'] = ClassMetadataInfo::MANY_TO_MANY;
+
+                    $question = new Question($questionHelper->getQuestion('Join Table name', $data['columnName']), $data['columnName']);
+                    $tableName = $questionHelper->ask($input, $output, $question);
+                    $data['joinTable']['name'] = $tableName;
+
+                    $question = new Question($questionHelper->getQuestion('Join Column name', $data['columnName'] . '_id'), $data['columnName'] . '_id');
+                    $columnName = $questionHelper->ask($input, $output, $question);
+
+                    $question = new Question($questionHelper->getQuestion('Join Columns referencedColumnName', 'id'), 'id');
+                    $referencedColumnName = $questionHelper->ask($input, $output, $question);
+
+                    $data['joinTable']['joinColumns'][] = [
+                        'name' => $columnName,
+                        'referencedColumnName' => $referencedColumnName,
+                        'onDelete' => 'CASCADE',
+                    ];
+
+                    $question = new Question($questionHelper->getQuestion('Inverse Join Column name', strtolower($entity) . '_id'), strtolower($entity) . '_id');
+                    $inverseColumnName = $questionHelper->ask($input, $output, $question);
+
+                    $question = new Question($questionHelper->getQuestion('Inverse Join Columns referencedColumnName', 'id'), 'id');
+                    $inverseReferencedColumnName = $questionHelper->ask($input, $output, $question);
+
+                    $data['joinTable']['inverseJoinColumns'][] = [
+                        'name' => $inverseColumnName,
+                        'referencedColumnName' => $inverseReferencedColumnName,
+                        'onDelete' => 'CASCADE',
+                    ];
+                } elseif ($type == 'OneToMany') {
+                    $data['type'] = ClassMetadataInfo::ONE_TO_MANY;
+
+                    $question = new Question($questionHelper->getQuestion('Mapped By', strtolower($entity)), strtolower($entity));
+                    $mappedBy = $questionHelper->ask($input, $output, $question);
+                    $data['mappedBy'] = $mappedBy;
+                    $data['cascade'] = false;
+                }
+            }
+
+            $question = new Question($questionHelper->getQuestion('Is nullable', 'false'), false);
+            $question->setValidator($boolValidator);
+            $question->setAutocompleterValues(array('true', 'false'));
+            if ($nullable = $questionHelper->ask($input, $output, $question)) {
+                $data['nullable'] = $nullable;
+                $data['joinColumns'][0]['nullable'] = $nullable;
             }

             $fields[$columnName] = $data;

--- vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Generator/DoctrineEntityGenerator.php	2016-12-19 15:38:49.593476953 +0200
+++ vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Generator/DoctrineEntityGenerator.php	2016-12-19 14:29:10.000000000 +0200
@@ -57,8 +57,13 @@
         }
         $class->mapField(array('fieldName' => 'id', 'type' => 'integer', 'id' => true));
         $class->setIdGeneratorType(ClassMetadataInfo::GENERATOR_TYPE_AUTO);
+
         foreach ($fields as $field) {
-            $class->mapField($field);
+            if (array_key_exists('check_type', $field) && $field['check_type'] == 'entity_reference') {
+                $class->addInheritedAssociationMapping($field);
+            } else {
+                $class->mapField($field);
+            }
         }

         $entityGenerator = $this->getEntityGenerator();

--- vendor/doctrine/dbal/lib/Doctrine/DBAL/Types/Type.php	2016-12-19 15:38:33.141692994 +0200
+++ vendor/doctrine/dbal/lib/Doctrine/DBAL/Types/Type.php	2016-12-19 12:40:11.000000000 +0200
@@ -51,6 +51,7 @@
     const BLOB = 'blob';
     const FLOAT = 'float';
     const GUID = 'guid';
+    const ENTITY = 'entity_reference';

     /**
      * Map of already instantiated type objects. One instance per type (flyweight).
@@ -83,6 +84,7 @@
         self::FLOAT => 'Doctrine\DBAL\Types\FloatType',
         self::BLOB => 'Doctrine\DBAL\Types\BlobType',
         self::GUID => 'Doctrine\DBAL\Types\GuidType',
+        self::ENTITY => 'Doctrine\DBAL\Types\ObjectType',
     );

     /**